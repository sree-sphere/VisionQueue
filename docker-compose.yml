services:
  api:
    build:
      context: .
      target: base
    command: uvicorn main:app --host 0.0.0.0 --port 8000
    container_name: api
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - redis
      - postgres
      - minio
    environment:
      - PROMETHEUS_MULTIPROC_DIR=/tmp/metrics-multiproc
    volumes:
      - ./logs:/app/logs
      - prometheus_multiproc:/tmp/metrics-multiproc
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8000/health"]
      interval: 15s
      timeout: 5s
      retries: 4
      start_period: 10s


  worker:
    build:
      context: .
      target: base
    command: celery -A services.celery_worker.celery_app worker --loglevel=info
    env_file:
      - .env
    depends_on:
      - redis
      - api
    environment:
      - PROMETHEUS_MULTIPROC_DIR=/tmp/metrics-multiproc
    volumes:
      - prometheus_multiproc:/tmp/metrics-multiproc

  flower:
    build:
      context: .
      target: base
    command: celery -A services.celery_worker.celery_app flower --port=5555
    ports:
      - "5555:5555"
    env_file:
      - .env
    depends_on:
      - redis
      - api

  redis:
    image: redis:7
    ports:
      - "6379:6379"

  postgres:
    image: postgres:14
    environment:
      POSTGRES_DB: ${PG_DB}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    ports:
      - "9000:9000"
      - "9011:9001"
    volumes:
      - minio_data:/data

  prometheus:
    image: prom/prometheus:v2.53.1
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    ports:
      - "9090:9090"
    depends_on:
      api:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"

  grafana:
    image: grafana/grafana:10.3.1
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
      GF_DASHBOARDS_JSON_ENABLED: "true"
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus

volumes:
  pgdata:
  minio_data:
  prometheus_data:
  grafana_data:
  prometheus_multiproc: