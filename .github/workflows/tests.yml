name: Run Tests and Coverage

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Create CI docker-compose file
        run: |
          cat << EOF > docker-compose.ci.yml
          version: '3.8'
          services:
            postgres:
              image: postgres:14
              environment:
                POSTGRES_DB: test_db
                POSTGRES_USER: test_user
                POSTGRES_PASSWORD: test_pass
              ports:
                - "5432:5432"
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U test_user"]
                interval: 10s
                timeout: 5s
                retries: 5

            redis:
              image: redis:7
              ports:
                - "6379:6379"
              healthcheck:
                test: ["CMD", "redis-cli", "ping"]
                interval: 10s
                timeout: 3s
                retries: 5

            minio:
              image: minio/minio:latest
              command: server /data --console-address ":9001"
              environment:
                MINIO_ROOT_USER: minioadmin
                MINIO_ROOT_PASSWORD: minioadmin
              ports:
                - "9000:9000"
                - "9001:9001"
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
                interval: 30s
                timeout: 10s
                retries: 5
                start_period: 30s
              volumes:
                - minio_data:/data

          volumes:
            minio_data:
          EOF

      - name: Start services
        run: |
          docker-compose -f docker-compose.ci.yml up -d
          
          # Wait for all services to be healthy
          echo "Waiting for services to be healthy..."
          timeout=300
          counter=0
          
          while [ $counter -lt $timeout ]; do
            postgres_healthy=$(docker-compose -f docker-compose.ci.yml ps postgres | grep "healthy" | wc -l)
            redis_healthy=$(docker-compose -f docker-compose.ci.yml ps redis | grep "healthy" | wc -l)
            minio_healthy=$(docker-compose -f docker-compose.ci.yml ps minio | grep "healthy" | wc -l)
            
            if [ "$postgres_healthy" -eq 1 ] && [ "$redis_healthy" -eq 1 ] && [ "$minio_healthy" -eq 1 ]; then
              echo "All services are healthy!"
              break
            fi
            
            echo "Waiting for services... ($counter/$timeout)"
            sleep 5
            counter=$((counter + 5))
          done
          
          if [ $counter -ge $timeout ]; then
            echo "Services failed to become healthy within $timeout seconds"
            docker-compose -f docker-compose.ci.yml ps
            docker-compose -f docker-compose.ci.yml logs
            exit 1
          fi

      - name: Create CI environment file
        run: |
          cat << EOF > .env.ci
          MODEL_NAME=resnet18
          CELERY_BROKER_URL=redis://localhost:6379/0
          CELERY_RESULT_BACKEND=redis://localhost:6379/0
          MINIO_ENDPOINT=localhost:9000
          MINIO_BUCKET=images
          MINIO_ACCESS_KEY=minioadmin
          MINIO_SECRET_KEY=minioadmin
          PG_HOST=localhost
          PG_PORT=5432
          PG_USER=test_user
          PG_PASSWORD=test_pass
          PG_DB=test_db
          PROM_PORT=8001
          WEBHOOK_TIMEOUT=5
          PROMETHEUS_MULTIPROC_DIR=/tmp/metrics-multiproc
          EOF

      - name: Install Dependencies
        run: |
          pip install uv
          uv pip install --system "python-dotenv[cli]" pytest pytest-cov coveralls httpx
          uv pip install --system -r requirements.txt

      - name: Create metrics directory
        run: mkdir -p /tmp/metrics-multiproc

      - name: Initialize MinIO bucket
        run: |
          pip install minio==7.2.4
          python -c "
          import time
          from minio import Minio
          from minio.error import S3Error
          import sys

          client = Minio('localhost:9000', 'minioadmin', 'minioadmin', secure=False)

          for i in range(10):
              try:
                  if not client.bucket_exists('images'):
                      client.make_bucket('images')
                      print('Created MinIO bucket: images')
                  else:
                      print('MinIO bucket already exists: images')
                  
                  # Test bucket access
                  list(client.list_objects('images', recursive=True))
                  print('MinIO bucket is ready and accessible')
                  break
                  
              except Exception as e:
                  print(f'Attempt {i+1}/10 failed: {e}')
                  if i < 9:
                      time.sleep(3)
                  else:
                      print('All attempts failed')
                      sys.exit(1)
          "

      - name: Run Tests
        run: |
          dotenv -f .env.ci run -- pytest --cov=. --tb=short -v || (echo "::error::Tests failed!" && exit 1)

      - name: Upload Coverage to Coveralls
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
        run: coveralls

      - name: Clean up
        if: always()
        run: |
          docker-compose -f docker-compose.ci.yml down -v